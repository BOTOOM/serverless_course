AWSTemplateFormatVersion: 2010-09-09
Description: >-
  DynamoDB
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Description: 'Environment name: dev - qa - stg - prod'
    Default: "dev"
  Language:
    Type: String
    Description: 'language - en - es'
    Default: "en"

Mappings: 
  TableNamesMap: 
    books:
      en: books
      es: libros
      fr: livres
    users:
      en: users
      es: usuarios
      fr: utilisatrices
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      FunctionName: "getAllItems"
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref BooksTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USERS_TABLE: !Ref UsersTable
          BOOK_TABLE: !Ref BooksTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${UsersTable}-getById"
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USERS_TABLE: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}-putItem"
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USERS_TABLE: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  putBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "putBook"
      Handler: src/handlers/put-book.putItemHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref BooksTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          BOOK_TABLE: !Ref BooksTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /book
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Users"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        Department: Engineering
        AppType: Serverless
  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !FindInMap [TableNamesMap, books, !Ref Language]
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        Department: Engineering
        AppType: Serverless

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BooksTableName:
    Description: Books table name
    Value: !Ref BooksTable
  GetAllUsersArn:
    Description: API Gateway endpoint URL for Prod stage
    Value: !GetAtt getAllItemsFunction.Arn
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
